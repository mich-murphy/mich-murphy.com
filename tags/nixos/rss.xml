<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Michael Murphy - Blog - nixos</title>
        <link>https://micha.elmurphy.com</link>
        <description>Documentation of personal projects covering topics such as data and technology</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://micha.elmurphy.com/tags/nixos/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Configuring Backup Solutions in NixOS</title>
            <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/backup-solutions-nixos/</link>
            <guid>https://micha.elmurphy.com/backup-solutions-nixos/</guid>
            <description>&lt;p&gt;One of my first consideration in setting up a homelab has been about a backup strategy - it&#x27;s difficult to have trust in a self-hosted instance of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nextcloud.com&#x2F;&quot;&gt;Nextcloud&lt;&#x2F;a&gt; when I don&#x27;t know whether data will exist after a hardware fault. One common backup strategy is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.seagate.com&#x2F;au&#x2F;en&#x2F;blog&#x2F;what-is-a-3-2-1-backup-strategy&#x2F;&quot;&gt;3-2-1 approach&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Installing NixOS on a Temporary File System</title>
            <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/nixos-tmpfs-installation/</link>
            <guid>https://micha.elmurphy.com/nixos-tmpfs-installation/</guid>
            <description>&lt;p&gt;In this post I explain how to install NixOS using a temporary file system (tmpfs). This is a precursor to the post I wrote about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;micha.elmurphy.com&#x2F;nixos-impermanence&#x2F;&quot;&gt;configuring NixOS for impermanence&lt;&#x2F;a&gt;, and walks through the installation.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Configuring NixOS for Impermanence</title>
            <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/nixos-impermanence/</link>
            <guid>https://micha.elmurphy.com/nixos-impermanence/</guid>
            <description>&lt;p&gt;After reading posts from both &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;grahamc.com&#x2F;blog&#x2F;erase-your-darlings&quot;&gt;Graham Christensen&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;elis.nu&#x2F;blog&#x2F;2020&#x2F;05&#x2F;nixos-tmpfs-as-root&#x2F;&quot;&gt;Elis Hirwing&lt;&#x2F;a&gt; about the idea of impermanence in NixOS I decided to try setting it up on my homelab. The basic idea is that we configure the system to use a temporary file system, where everything is wiped after a reboot, unless specified otherwise.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How To Configure Systemd Services and Timers in Nixos</title>
            <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/systemd-services-and-timers-nixos/</link>
            <guid>https://micha.elmurphy.com/systemd-services-and-timers-nixos/</guid>
            <description>&lt;p&gt;Whilst migrating my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mich-murphy&#x2F;nix-config&#x2F;blob&#x2F;master&#x2F;hosts&#x2F;homelab&#x2F;configuration.nix&quot;&gt;homelab&lt;&#x2F;a&gt; from Ubuntu to Nixos I came across the need to schedule a cron job, which I had setup to sync my media collection from a remote server.&lt;&#x2F;p&gt;
&lt;p&gt;After doing a bit of research I discovered that rather than using a cron job, the preferred method is to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;paperless.blog&#x2F;systemd-services-and-timers-in-nixos&quot;&gt;create a systemd service&lt;&#x2F;a&gt; and schedule it using a systemd timer. The major benefits of doing so are:&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How To Mount S3 Object Storage in NixOS</title>
            <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/s3-object-storage-nixos/</link>
            <guid>https://micha.elmurphy.com/s3-object-storage-nixos/</guid>
            <description>&lt;p&gt;I previously wrote about how I mounted s3 object storage to my &lt;a href=&quot;&#x2F;s3-object-storage.md&quot;&gt;homelab running Ubuntu&lt;&#x2F;a&gt;. I&#x27;ve since been configuring my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mich-murphy&#x2F;nix-config&#x2F;blob&#x2F;master&#x2F;hosts&#x2F;homelab&#x2F;configuration.nix&quot;&gt;homelab&lt;&#x2F;a&gt; to run using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;NixOS&lt;&#x2F;a&gt;. NixOS has a major advantage over Ubuntu for me, in that the entire system is configured declaratively, meaning once you have a working configuration you can use it to rebuild everything exactly how it was setup before.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Useful References for Understanding Nix&#x2F;NixOS</title>
            <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
            <link>https://micha.elmurphy.com/nix-useful-references/</link>
            <guid>https://micha.elmurphy.com/nix-useful-references/</guid>
            <description>&lt;p&gt;I recently used Nix to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mich-murphy&#x2F;nix-config&quot;&gt;configure my M2 Macbook Air&lt;&#x2F;a&gt;, and manage all of my dotfiles. In the process I found a lot of useful references, detailing the ins and outs of Nix and NixOS.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m currently building out a similar solution for my homelab, and thought to document a list of useful references here.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
